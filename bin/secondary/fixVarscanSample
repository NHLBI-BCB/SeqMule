#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use File::Basename qw/basename dirname/;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($help, $samtools, $vcf,);
my @bam;

@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'samtools=s'	=>	\$samtools,
    'bam=s'		=>	\@bam,
    'vcf=s'	        =>	\$vcf,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

my $tmp="/tmp/$$".rand($$).".tmp.vcf";
open OUT,'>',$tmp or die "ERROR: Failed to write to $tmp: $!\n";
open IN,'<',$vcf or die "ERROR: Failed to read $vcf: $!\n";

while(<IN>)
{
	print OUT and next unless /^#CHROM/;
	chomp;
	my @f=split /\t/;
	for my $i(0..$#bam)
	{
		my @allsample=&SeqMule::Utils::getBAMSample($samtools,$bam[$i]);
		$f[$i+9]=$allsample[0];
	}
	print OUT join("\t",@f),"\n";
}
close OUT;
close IN;

!system("mv $tmp $vcf") or die "ERROR: $!\n";


__END__


=head1 NAME

SeqMule an automatic pipeline for next-generation sequencing data analysis

=head1 SYNOPSIS

Options:

    #input and output
    'samtools=s'	=>	\$samtools,
    'bam=s'		=>	\@bam,
    'vcf=s'	        =>	\$vcf,
    #other
    'help|h'	        =>	\$help,

=head1 OPTIONS

=over 8

=item B<--help>

Show detaild help.

=back

=head1 DESCRIPTION

SeqMule automatizes analysis of next-generation sequencing data by simplifying program installation, downloading of various databases, generation of analysis script, and customization of your pipeline.

=cut
