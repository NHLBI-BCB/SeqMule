#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($advanced,$n,$help,
    $snap,$samtools,$sortmem,$java,$jmem,$sortsam,$ref,$bam,$threads,$rg,$sample,$pl,$lb);
#check tmpdir beforeuse!!!!
my ($tmpdir,$interleave_fq);
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'snap=s'		=>	\$snap,
    'samtools=s'	=>	\$samtools,
    'sortmem=s'		=>	\$sortmem,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$jmem,
    'sortsam=s'		=>	\$sortsam,
    'interleave_fq=s'	=>	\$interleave_fq,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\$bam,
    'threads=i'		=>	\$threads,
    'rg=s'		=>	\$rg,
    'sample=s'		=>	\$sample,
    'pl=s'		=>	\$pl,
    'lb=s'		=>	\$lb,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

my @fq=@ARGV;
my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };
#my $tmpbam = File::Spec->catfile($tmpdir,$$.rand($$)."_snap.bam");
my $tmpbam = File::Spec->catfile(".",$$.rand($$)."_snap.bam");
$bam=~/(.*?)\.bam$/ or die "ERROR: expect *.bam for BAM files: $bam\n";
my $prefix_bam = $1;
    my $combo_fq = "$prefix_bam.combo.fastq";

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);

my $cmd;
my @cmd;

if(@fq == 2)
{

    push @cmd,"$interleave_fq @fq $combo_fq";
##cat NA12878D_HiSeqX_combo.readpairno.fastq | /home/yunfeiguo/projects/SeqMule_pre-release/exe/snap/snap  paired  /home/yunfeiguo/projects/SeqMule_pre-release/bin/secondary/../../database/snap/human_g1k_v37.fasta -pairedInterleavedFastq - -F a  -h 300  -H 2000  -d 15  -s 50 1000  -t 12 -R '@RG\tID:READGROUP_snap-freebayes12\tSM:snap-freebayes12\tPL:ILLUMINA\tLB:LIBRARY'  -o -bam ./3131012100.1648201228_snap.bam
    $cmd .= "cat $combo_fq | ";
    $cmd .= "$snap ";
    $cmd .= " paired ";
    $cmd .= " $ref -pairedInterleavedFastq - ";
} elsif (@fq == 1)
{
    $cmd .= "cat $fq[0] | ";
    $cmd .= "$snap ";
    $cmd .= " single ";
    $cmd .= " $ref -fastq - ";
} else
{
    die "ERROR: expect 1 or 2 FASTQ files.";
}
$cmd .= " -F a "; #only output aligned reads
$cmd .= " -h $options{singleMaxHits} " if $options{singleMaxHits} ne '';
$cmd .= " -H $options{pairMaxHits} " if @fq == 2 && $options{pairMaxHits} ne '';
$cmd .= " -d $options{maxDist} " if $options{maxDist} ne '';
$cmd .= " -s $options{readSpacingMin} $options{readSpacingMax} " if @fq == 2 && $options{readSpacingMin} ne '' && $options{readSpacingMax} ne '';
$cmd .=($threads >= 2? " -t $threads" : "");
$cmd .= " -R '\@RG\\tID:$rg\\tSM:$sample\\tPL:$pl\\tLB:$lb' ";
$cmd .= " $options{additional} " if $options{additional} ne '';
$cmd .= " -o -bam $tmpbam"; #pipe output to samtools, by default, this should be SAM format
push @cmd,$cmd;
$cmd = '';

$cmd .= " $samtools view -b ";
$cmd.=" -F 256 "; #only output primary alignment
$cmd .=($threads >= 2? " -@ $threads" : "");
$cmd .= " $tmpbam | $samtools sort ".($sortmem?" -m $sortmem":"").($threads>=2? " -@ $threads":"")." - $prefix_bam";
push @cmd,$cmd;
$cmd = '';

push @cmd,"rm -f $tmpbam";
if(@fq == 2)
{
    push @cmd,"rm -f $combo_fq";
}

my $script=&SeqMule::Parallel::genTempScript(@cmd);
exec $script;


__END__


=head1 NAME

SeqMule an automatic pipeline for next-generation sequencing data analysis

=head1 SYNOPSIS

Options:


=head1 OPTIONS

=over 8

=item B<--help>

Show detaild help.

=back

=head1 DESCRIPTION

SeqMule automatizes analysis of next-generation sequencing data by simplifying program installation, downloading of various databases, generation of analysis script, and customization of your pipeline.

=cut
