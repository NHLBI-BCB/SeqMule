#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;


my ($advanced,$n,$help,
    $tmpdir,
    $soap,    $samtools,    $soap2sam,    $java,    $jmem,    $sortsam,
    $index,    $bam,    $sam,    $unpaired, $unmapped,    $alnfile,
    $threads,
    $rg,    $sample,    $pl,    $lb,
);
my @fq;
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'alignerPath=s'	=>	\$soap,
    'samtools=s'	=>	\$samtools,
    'soap2sam=s'	=>	\$soap2sam,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$jmem,
    'sortsam=s'		=>	\$sortsam,
    'ref=s'		=>	\$index,
    'bam=s'		=>	\$bam,
    'soapaln=s'		=>	\$alnfile,
    'threads=i'		=>	\$threads,
    'rg=s'		=>	\$rg,
    'sample=s'		=>	\$sample,
    'pl=s'		=>	\$pl,
    'lb=s'		=>	\$lb,
    'fq=s'		=>	\@fq, #specify it multiple times
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);

my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };
my $paired=0;
$paired=1 if @fq>1;
$unpaired = File::Spec->catfile($tmpdir,rand($$)."soap_unpaired.soapout");
$sam = File::Spec->catfile($tmpdir,rand($$)."soap.sam");
$unmapped = File::Spec->catfile($tmpdir,rand($$)."soap.unmapped.out");


my $cmd="$soap -D $index";
my @cmd;

$cmd.=" -p $threads" if $threads > 1;
if ($paired) 
{    
    $cmd.=" -a $fq[0] -b $fq[1] -o $alnfile -2 $unpaired -u $unmapped";
}
else 
{
    $cmd.="-a $fq[0] -o $alnfile -u $unmapped";
}
$cmd.=" -x $options{maxIns}" if $options{maxIns};
$cmd.=" -m $options{minIns}" if $options{minIns} && $options{minIns} ne '';
$cmd.=" -v $options{maxMis}" if $options{maxMis} && $options{maxMis} ne '';
$cmd.=" -n $options{maxN}" if $options{maxN} && $options{maxN} ne '';
$cmd.=" $options{additional} " if $options{additional} ne '';
push @cmd,$cmd;$cmd='';

#insert header containing platform information
open SOAPSAM, ">", $sam or die "ERROR: Can't write to $sam : $!\n";
map {print SOAPSAM "\@SQ\tSN:$$_[0]\tLN:$$_[1]\n" } &SeqMule::Utils::SOAPIndex2Contig("$index.ann");
print SOAPSAM "\@RG\tID:$rg\tSM:$sample\tPL:$pl\tLB:$lb\n";
print SOAPSAM "\@PG\tID:SOAPalinger\n";
close SOAPSAM;

if ($paired) 
{    $cmd="$^X $soap2sam -p -a -o $sam -u $unmapped -s $unpaired $alnfile"} 
else 
{ $cmd="$^X $soap2sam -a -o $sam -u $unmapped $alnfile"}

push @cmd,$cmd; $cmd="";
my ($bam_prefix)= $bam=~/(.*?)\.bam$/ or die "ERROR: expect *.bam for BAM files: $bam\n";
$cmd="$samtools view -@ $threads -b -S $sam | $samtools sort ".($threads>=2? " -@ $threads":"")." - $bam_prefix";

push @cmd,$cmd;$cmd="";
push @cmd,"rm -rf $sam $unmapped $unpaired";

my $script=&SeqMule::Parallel::genTempScript(@cmd);
exec $script;

__END__
