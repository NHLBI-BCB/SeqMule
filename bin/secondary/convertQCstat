#!/usr/bin/env perl

use strict;
use warnings;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my (@file,@alias,$out,$help);
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'file=s'		=>	\@file,
    'alias=s'		=>	\@alias,
    'out=s'		=>	\$out,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});
die "ERROR: expect same number of files and aliases\n" unless @file == @alias;

warn "WARNING: existing $out will be removed" and !system("rm -rf $out") or die "ERROR: failed to rm $out\n" if -e $out;
for my $i(0..$#file) {
    my $file = $file[$i];
    my $alias = $alias[$i];
    die "Input FASTQ file must have .fq or .fastq suffix, input BAM file must have .bam suffix: $file\n" unless $file=~/(.*)\.(fq|fastq|fq\.gz|fastq\.gz|bam)$/i;

    my $folder= ($2 eq 'fq' ? $file : $1)."_fastqc";
    my $summary= File::Spec->catfile($folder,"summary.txt");
    open OUT,'>>',$out or die "Can't write to $out: $!\n";
    if (-f $summary) {
	open IN,'<',$summary or die "Cannot open $summary: $!\n";
	print OUT "$alias=QC stats\n";
	while(<IN>) {
	    print OUT "$2=$1\n" if /(PASS|FAIL|WARN)\t(.*?)\t/;
	}
	close IN;
    } else {
	warn "Cannot find $file report.\n";
    }
    close OUT;
}
