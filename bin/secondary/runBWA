#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;


my ($advanced,$n,$help,
    $bwa,$samtools,$java,$jmem,$sortsam,$ref,$bam,$threads,$rg,$sample,$pl,$lb);
my $tmpdir;
my @fq;
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'alignerPath=s'	=>	\$bwa,
    'samtools=s'	=>	\$samtools,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$jmem,
    'sortsam=s'		=>	\$sortsam,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\$bam,
    'threads=i'		=>	\$threads,
    'rg=s'		=>	\$rg,
    'sample=s'		=>	\$sample,
    'pl=s'		=>	\$pl,
    'lb=s'		=>	\$lb,
    'fq=s'		=>	\@fq, #specify it multiple times
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);

my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };
my @sai = map { File::Spec->catfile($tmpdir,rand($$).".$_.bwabacktrack.sai") } (0..$#fq);
my @cmd;

for my $i(0..$#fq)
{
    #$phred content has been converted to +33
    push @cmd,
    "$bwa aln".
    (  $options{quality} ? " -q $options{quality}" : "").
    ($threads>=2? " -t $threads" : "").
    " -f $sai[$i]".
    ($options{ALNadditional} ne ""? " $options{ALNadditional} ":''). 
    " $ref".
    " $fq[$i]";
}

{
my ($bam_prefix)= $bam=~/(.*?)\.bam$/ or die "ERROR: expect *.bam for BAM files: $bam\n";
my $cmd="$bwa ".(@fq==2 ? "sampe":"samse")." -r '\@RG\\tID:$rg\\tSM:$sample\\tPL:$pl\\tLB:$lb' ";
$cmd.=" $options{SAMadditional} " if $options{SAMadditional} ne ''; 
$cmd.=" $ref @sai @fq ";
$cmd.=" | $samtools view -b -S ";
$cmd.=" -F 256 "; #only output primary alignment
$cmd.=($threads>=2? " -@ $threads":"");
$cmd .= " - | $samtools sort ".($threads>=2? " -@ $threads":"")." - $bam_prefix";

push @cmd,$cmd;
}

push @cmd,"rm -rf @sai";

my $script=&SeqMule::Parallel::genTempScript(@cmd);
exec $script;


__END__
