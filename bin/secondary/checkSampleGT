#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use File::Basename qw/basename dirname/;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($help, $vcf,$tmpdir,);

@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'vcf=s'	        =>	\$vcf,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);
my $tmp=File::Spec->catfile($tmpdir,"$$".rand($$).".tmp.vcf");
open OUT,'>',$tmp or die "ERROR: Failed to write to $tmp: $!\n";
open IN,'<',$vcf or die "ERROR: Failed to read $vcf: $!\n";
my $sample_count=0;

while(<IN>)
{
    	if (/^#CHROM/)
	{
	    $sample_count=scalar(split /\t/,$_)-9;
	    die "ERROR: At least one sample expected in $vcf!\n" unless $sample_count>=1;
	} elsif (!/^#/)
	{
	    my $current_count=scalar(split /\t/,$_)-9;
	    if ($current_count<$sample_count)
	    {
		chomp;
		$_.="\t./."x($sample_count-$current_count);
		$_.="\n";
	    } elsif ($current_count>$sample_count)
	    {
		die "ERROR: There are more samples than defined in header at line $. of $vcf\n";
	    }
	}
	print OUT;
}
close OUT;
close IN;

!system("mv $tmp $vcf") or die "ERROR: $!\n";


__END__
