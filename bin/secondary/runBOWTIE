#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($advanced,$n,$help,
    $bowtie,$samtools,$java,$jmem,$sortsam,$ref,$bam,$threads,$rg,$sample,$pl,$lb);
#check before use TMPDIR!!!!
my @fq;
my $tmpdir;
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'alignerPath=s'	=>	\$bowtie,
    'samtools=s'	=>	\$samtools,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$jmem,
    'sortsam=s'		=>	\$sortsam,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\$bam,
    'fq=s'		=>	\@fq, #specify it multiple times
    'threads=i'		=>	\$threads,
    'rg=s'		=>	\$rg,
    'sample=s'		=>	\$sample,
    'pl=s'		=>	\$pl,
    'lb=s'		=>	\$lb,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    ###test tmpdir before use
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);
my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };

my ($bam_prefix)= $bam=~/(.*?)\.bam$/ or die "ERROR: expect *.bam for BAM files: $bam\n";
my $cmd;

$cmd.="$bowtie $ref --sam";
$cmd.=" --best" if defined $options{ReportBest} && $options{ReportBest} ne "";
$cmd.=" --chunkmbs $options{ChunkMBs}" if defined $options{ChunkMBs} && $options{ChunkMBs} ne "";
$cmd.=" --minins $options{minIns}" if defined $options{minIns} && $options{minIns} ne "";
$cmd.=" --maxins $options{maxIns}" if defined $options{maxIns} && $options{maxIns} ne "";
$cmd.=" --nomaqround" if $options{NoMaqRound}==1;
$cmd.=" -p $threads" if $threads>=2;
$cmd.=" --sam-RG ID:$rg ";
$cmd.=" --sam-RG SM:$sample ";
$cmd.=" --sam-RG PL:$pl ";
$cmd.=" --sam-RG LB:$lb ";
$cmd.=" $options{additional} " if $options{additional} ne '';
$cmd.=" --seed 1 "; #make results reproducible

for my $i(@fq)
{
    if($i=~/\.gz$/i)
    {
	warn "NOTICE: unzipping $i...\n";
	my $tmpfile = File::Spec->catfile($tmpdir,"$$".rand($$).".fastq");
	!system("gunzip -c $i > $tmpfile") or die "ERROR: failed to unzip $i: $!\n";
	#the original fq is lost here!!!!
	$i = $tmpfile;
    }
}

if (@fq>1)
{   
    $cmd.=" -1 $fq[0] -2 $fq[1]";
} else 
{  
    $cmd.=" $fq[0]";
}

$cmd.=" /dev/stdout |";
$cmd.=" perl -ne 'if (/^[^\@]/) {s/\\s+\$//;s/\$/\\tRG:Z:$rg\\n/;}print;' |"; #add RGID for each read
$cmd.=" $samtools view -b -S ";
$cmd.=" -F 256 "; #only output primary alignment
$cmd.=($threads>=2? " -@ $threads ":"");
$cmd .= " - | $samtools sort ".($threads>=2? " -@ $threads":"")." - $bam_prefix";

my $script=&SeqMule::Parallel::genTempScript($cmd);
exec $script;
#warn $cmd,"\n";


__END__
