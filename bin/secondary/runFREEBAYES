#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use File::Basename qw/basename dirname/;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($advanced,$n,$help,
    $bed,$freebayes,$samtools,
    $vcf_sort,$ref,$vcf_filter,$tmpdir,);
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'bed=s'		=>	\$bed,
    'freebayes=s'	=>	\$freebayes,
    'samtools=s'	=>	\$samtools,
    'vcf-sort=s'	=>	\$vcf_sort,
    'ref=s'		=>	\$ref,
    'vcf=s'		=>	\$vcf_filter,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);
my @bam=@ARGV;
my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };

my $cmd;
my @cmd;

my $contig_bed= &SeqMule::Utils::BAMHeader2BED($samtools,$bam[0]);

$cmd="$freebayes @bam ";
$cmd.=" --fasta-reference $ref --no-mnps --no-complex ";
$cmd.=" --min-mapping-quality $options{minMapQual}" if defined $options{minMapQual} && $options{minMapQual} ne '';
$cmd.=" --min-base-quality $options{minBaseQual}" if defined $options{minBaseQual} && $options{minBaseQual} ne '';
$cmd.=" --read-max-mismatch-fraction $options{maxMismatchFraction}" if defined $options{maxMismatchFraction} && $options{maxMismatchFraction} ne '';
$cmd.=" --read-snp-limit $options{maxSNP}" if defined $options{maxSNP} && $options{maxSNP} ne '';
$cmd.=" --read-indel-limit $options{maxINDEL}" if defined $options{maxINDEL} && $options{maxINDEL} ne '';
$cmd.=" --min-coverage $options{minDepth}" if defined $options{minDepth} && $options{minDepth} ne '';
$cmd.=" -t $bed" if $bed;
$cmd.=" $options{additional} " if $options{additional} ne '';
$cmd.=" | $vcf_sort -tmpdir $tmpdir -contig-bed $contig_bed > $vcf_filter ";

push @cmd,$cmd;$cmd="";

if (@bam>1) #multi-sample calling
{
    for (@bam)
    {
	my ($new_prefix)= /^(.*)\.bam$/i;
	if ($vcf_filter=~/_(\d+)_/) #if true, we are under QUICK mode
	{
	$new_prefix=File::Spec->catfile((dirname $new_prefix),"_${1}_.".(basename $new_prefix));
	}
	my $out_filter="${new_prefix}_freebayes.multi-call.filter.vcf";
	#make a copy of final vcf for each prefix (samplename)
	push @cmd,"cp $vcf_filter $out_filter";
    }
}

my $script=&SeqMule::Parallel::genTempScript(@cmd);
exec $script;

#freebayes chr1.bam chr2.bam --vcf try.ms.vcf --fasta-reference ~/projects/seqmule_no_MB/database/human_g1k_v37.fasta  --no-mnps --no-complex --min-mapping-quality 30 --min-base-quality 10 --read-mismatch-limit 10 --read-max-mismatch-fraction 0.5 --read-snp-limit 5 --read-indel-limit 5 --min-coverage 10


__END__


=head1 NAME

SeqMule an automatic pipeline for next-generation sequencing data analysis

=head1 SYNOPSIS

Options:

    #input and output
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'bed=s'		=>	\$bed,
    'freebayes=s'	=>	\$freebayes,
    'vcf-sort=s'	=>	\$vcf_sort,
    'ref=s'		=>	\$ref,
    'vcf=s'		=>	\$vcf_filter,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,

=head1 OPTIONS

=over 8

=item B<--help>

Show detaild help.

=back

=head1 DESCRIPTION

SeqMule automatizes analysis of next-generation sequencing data by simplifying program installation, downloading of various databases, generation of analysis script, and customization of your pipeline.

=cut
