#!/usr/bin/env perl

#interface for VARSCAN
use strict;
use warnings;
use File::Spec;
use File::Basename qw/basename dirname/;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($advanced,$n,$help,
    $samtools,    $java,    $java_mem,    $varscan,
    $ref,
    $somatic_flag,
    $vcf_filter,    $bed,$tmpdir,);
my @bam;
my $BUFFER_SIZE = 1_000_000; #used for gettting input from samtools mpileup

@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'samtools=s'	=>	\$samtools,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$java_mem,
    'varscan=s'		=>	\$varscan,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\@bam,
    'vcf-filter=s'	=>	\$vcf_filter,
    'callSomatic'	=>	\$somatic_flag,
    'bed=s'		=>	\$bed,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);
my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };

my @cmd;
my $cmd='';

#samtools command will be same for both situations
my $samtools_cmd_template = "$samtools mpileup ";
$samtools_cmd_template .= " -l $bed " if $bed;
$samtools_cmd_template .= " $options{SAMadditional} " if $options{SAMadditional} ne '';
$samtools_cmd_template .= " -B -f $ref BAMFILE ";

if($somatic_flag) {
    my ($vcf_prefix) = $vcf_filter =~ /(.*?)\.vcf$/;
    my $snpvcf = "$vcf_prefix.snp.vcf";
    my $indelvcf = "$vcf_prefix.indel.vcf";
    my ($normal_cmd,$tumor_cmd);
    $normal_cmd = $tumor_cmd = $samtools_cmd_template;
    $normal_cmd =~ s/BAMFILE/$bam[0]/;
    $tumor_cmd =~ s/BAMFILE/$bam[1]/;

    $cmd = "bash -c \"$java -Xmx$java_mem -Djava.io.tmpdir=$tmpdir -jar $varscan somatic <\($normal_cmd\) <\($tumor_cmd\) $vcf_prefix ";
    $cmd .= " --output-vcf 1 ";
    $cmd .=" --min-coverage $options{minDepth}" if $options{minDepth};
    $cmd .=" --p-value $options{P}" if $options{P};
    $cmd .=" $options{VARSOMATICadditional} " if $options{VARSOMATICadditional} ne '';
    $cmd .= " \" ";
    push @cmd,$cmd;
    push @cmd,&genCorrectVCFCmd({vcf=>$snpvcf,bam=>[$bam[0]]});
    push @cmd,&genCorrectVCFCmd({vcf=>$indelvcf,bam=>[$bam[0]]});
#combine snp and indel
    my $seqmule_stats = File::Spec->catfile($RealBin,"stats");
    push @cmd,"$seqmule_stats -u-vcf $snpvcf,$indelvcf -p $vcf_prefix  -ref $ref";
#change output file name
    push @cmd,"mv -f ${vcf_prefix}_union.vcf $vcf_filter";
    #we don't need separate snp and indel VCFs
    push @cmd,"rm -f $snpvcf $indelvcf";
} else {
    my $samtools_cmd = $samtools_cmd_template;
    $samtools_cmd =~ s/BAMFILE/@bam/;
    if(open IN,$samtools_cmd) {
	if (<IN>) {
	    $cmd=$samtools_cmd;
	    my $varscan_cmd.="$java -Xmx$java_mem -Djava.io.tmpdir=$tmpdir -jar $varscan mpileup2cns --output-vcf 1 --variants 1 ";
	    $varscan_cmd.=" --min-coverage $options{minDepth}" if $options{minDepth};
	    $varscan_cmd.=" --min-reads2 $options{minSupport}" if $options{minSupport};
	    $varscan_cmd.=" --min-avg-qual $options{minBaseQ}" if $options{minBaseQ};
	    $varscan_cmd.=" --p-value $options{P}" if $options{P};
	    $varscan_cmd.=" $options{VARadditional} " if $options{VARadditional} ne '';
	    $varscan_cmd.=" > $vcf_filter";
	    $cmd.="perl -e 'open IN,\"$samtools_cmd\" or die \"Failed to open samtools pipe: $!\\n\";
	    my \$buf;
	    if(read IN,\$buf,64_000){
	    open OUT,\"|-\",\"$varscan_cmd\" or die \"Failed to open varscan pipe: $!\\n\";
	    print OUT \$buf;
	    while(read IN,\$buf,$BUFFER_SIZE)
	    {
	    print OUT \$buf;
	    }
	    }'";
	} 
	close IN;
    } else {
	warn "Failed to open samtools pipe (possibly insufficient coverage in target region): $!\n";
    }
    push @cmd,$cmd;
    push @cmd,&genCorrectVCFCmd({vcf=>$vcf_filter,bam=>\@bam});
}


my $script=&SeqMule::Parallel::genTempScript(@cmd);
exec $script;

#############################################################################333
sub genCorrectVCFCmd {
    my $opt = shift;
    my $localVcf = $opt->{vcf};
    my @bam = @{$opt->{bam}};
    my @return;
    my $cmd='';
#occasionally, VarScan doesn't generate header even if samtools mpileup has output
    my $addheader=File::Spec->catfile($RealBin,"addVCFHeader");
    $cmd="$addheader -caller varscan -vcf $localVcf ";
    map {$cmd.=" -sample $_ ";} &SeqMule::Utils::getBAMSample($samtools,@bam);
    push @return,$cmd;$cmd='';

#remove duplicate ALT allele since GATK will complain
    my $rmDupAltVCF=File::Spec->catfile($RealBin,"rmDupAltVCF");
    push @return,"$rmDupAltVCF $tmpdir $ref $localVcf";

#add sample name if it's absent
    my $fixVarscanSample=File::Spec->catfile($RealBin,"fixVarscanSample");
    push @return,"$fixVarscanSample -samtools $samtools ".join(" ",map {" -bam $_"} @bam)." -vcf $localVcf -tmpdir $tmpdir ";

#make sure number of samples on every line is the same as that specified in header
    my $checkSampleGT=File::Spec->catfile($RealBin,"checkSampleGT");
    push @return,"$checkSampleGT -vcf $localVcf -tmpdir $tmpdir ";
    return @return;
}
__END__
