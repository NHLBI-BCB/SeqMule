#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use File::Basename qw/basename dirname/;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($advanced,$n,$help,
    $bcftools,$samtools,$vcfutils,$vcf,$vcf_filter,$ref,$bed);
my @bam;
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'samtools=s'	=>	\$samtools,
    'bcftools=s'	=>	\$bcftools,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\@bam,
    'vcfutils=s'	=>	\$vcfutils,
    'vcf=s'		=>	\$vcf,
    'vcf-filter=s'	=>	\$vcf_filter,
    'bed=s'		=>	\$bed,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };

my $cmd;
my @cmd;

$cmd.="$samtools mpileup -uD -f $ref ";
$cmd.=" $options{SAMadditional} " if $options{SAMadditional} ne '';
$cmd.=" -l $bed " if $bed;
$cmd.=" @bam";
$cmd.=" -C $options{bwaDownGrade}" if ( ($options{bwaDownGrade}) && grep { /_bwa/} @bam); #/_bwa/ means bam is generated by bwa or bwamem
$cmd.=" | $bcftools view ";
$cmd.=" -vcg ";
$cmd.=" $options{BCFadditional} " if $options{BCFadditional} ne '';
$cmd.=" - > $vcf";
push @cmd,$cmd;$cmd="";

#filtration
$cmd.="$^X $vcfutils varFilter";
$cmd.=" -d $options{minDepth}" if $options{minDepth};
$cmd.=" -1 $options{minStrandBias}" if $options{minStrandBias};
$cmd.=" -2 $options{minBaseQBias}" if $options{minBaseQBias};
$cmd.=" -3 $options{minMapQBias}" if $options{minMapQBias};
$cmd.=" -4 $options{minEndDistBias}" if $options{minEndDistBias};
$cmd.=" $options{FILTERadditional} " if $options{FILTERadditional} ne '';
$cmd.=" $vcf | $^X -p -e 's/([^\\t]+\\t[^\\t]+\\t[^\\t]+\\t[^\\t]+\\t[^\\t]+\\t[^\\t]+\\t)\\./\$1PASS/' > $vcf_filter";
push @cmd,$cmd;$cmd="";

if (@bam>1) #multi-sample calling
{
    for (@bam)
    {
	my ($new_prefix)= /^(.*)\.bam$/i;
	if ($vcf_filter=~/_(\d+)_/) #if true, we are under QUICK mode
	{
	$new_prefix=File::Spec->catfile((dirname $new_prefix),"_${1}_.".(basename $new_prefix));
	}
	my $out_filter="${new_prefix}_samtools.multi-call.filter.vcf";
	#make a copy of final vcf for each prefix (samplename)
	push @cmd,"cp $vcf_filter $out_filter";
    }
}

my $script=&SeqMule::Parallel::genTempScript(@cmd);
exec $script;


__END__


=head1 NAME

SeqMule an automatic pipeline for next-generation sequencing data analysis

=head1 SYNOPSIS

Options:

    #input and output
    'samtools=s'	=>	\$samtools,
    'bcftools=s'	=>	\$bcftools,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\@bam,
    'vcfutils=s'	=>	\$vcfutils,
    'vcf=s'		=>	\$vcf,
    'vcf-filter=s'	=>	\$vcf_filter,
    'bed=s'		=>	\$bed,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    #other
    'help|h'	        =>	\$help,

=head1 OPTIONS

=over 8

=item B<--help>

Show detaild help.

=back

=head1 DESCRIPTION

SeqMule automatizes analysis of next-generation sequencing data by simplifying program installation, downloading of various databases, generation of analysis script, and customization of your pipeline.

=cut
