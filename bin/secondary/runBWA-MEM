#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;

my ($advanced,$n,$help,
    $bwa,$samtools,$java,$jmem,$sortsam,$ref,$bam,$threads,$rg,$sample,$pl,$lb);
my @fq;
#check tmpdir beforeuse!!!!
my $tmpdir;
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'alignerPath=s'	=>	\$bwa,
    'samtools=s'	=>	\$samtools,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$jmem,
    'sortsam=s'		=>	\$sortsam,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\$bam,
    'fq=s'		=>	\@fq, #specify it multiple times
    'threads=i'		=>	\$threads,
    'rg=s'		=>	\$rg,
    'sample=s'		=>	\$sample,
    'pl=s'		=>	\$pl,
    'lb=s'		=>	\$lb,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };
my ($bam_prefix)= $bam=~/(.*?)\.bam$/ or die "ERROR: expect *.bam for BAM files: $bam\n";

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);
my $cmd;

$cmd .= "$bwa mem -M ";# -M for Picardtools compatibility
$cmd .= " -T 0 "; #output all reads
$cmd .= " -A $options{matchScore} " if $options{matchScore} ne ''; #score for a sequence match
$cmd .= " -B $options{mismatchPenalty} " if $options{mismatchPenalty} ne ''; #penalty for a mismatch
$cmd .= " -O $options{gapOpenPenalty} " if $options{gapOpenPenalty} ne ''; #penalty for gap open
$cmd .= " -E $options{gapExtensionPenalty} " if $options{gapExtensionPenalty} ne ''; #penalty for gap extension; a gap of size k cost: gapOpenPenalty + gapExtensionPenalty*k
$cmd .= " -L $options{clipPenalty} " if $options{clipPenalty} ne ''; #penalty for clipping
$cmd .= " -U $options{readSingletonPenalty} " if $options{readSingletonPenalty} ne ''; #penalty for unpaired read pair
$cmd .= " $options{additional} " if $options{additional} ne '';
$cmd .=($threads >= 2? " -t $threads" : "");
$cmd .= " -R '\@RG\\tID:$rg\\tSM:$sample\\tPL:$pl\\tLB:$lb' $ref @fq | ";
$cmd .= " $samtools view -b -S ";
$cmd.=" -F 256 "; #only output primary alignment
$cmd .=($threads >= 2? " -@ $threads" : "");
$cmd .= " - | $samtools sort ".($threads>=2? " -@ $threads":"")." - $bam_prefix";


my $script=&SeqMule::Parallel::genTempScript($cmd);
exec $script;


__END__
