#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use FindBin qw/$RealBin/;
use lib File::Spec->catdir($RealBin,"..","..","lib");
use SeqMule::Parallel;
use SeqMule::Utils;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions/;


my ($advanced,$n,$help,
    $bowtie2,$samtools,$java,$jmem,$sortsam,$ref,$bam,$threads,$rg,$sample,$pl,$lb);
my @fq;
my $tmpdir;
@ARGV or pod2usage ({-exitval=>2});
GetOptions(
    #input and output
    'alignerPath=s'	=>	\$bowtie2,
    'samtools=s'	=>	\$samtools,
    'java=s'		=>	\$java,
    'jmem=s'		=>	\$jmem,
    'sortsam=s'		=>	\$sortsam,
    'ref=s'		=>	\$ref,
    'bam=s'		=>	\$bam,
    'fq=s'		=>	\@fq, #specify it multiple times
    'threads=i'		=>	\$threads,
    'rg=s'		=>	\$rg,
    'sample=s'		=>	\$sample,
    'pl=s'		=>	\$pl,
    'lb=s'		=>	\$lb,
    'advanced=s'	=>	\$advanced,
    'n=i'		=>	\$n,
    #check tmpdir using Utils before use
    'tmpdir=s'		=>	\$tmpdir,
    #other
    'help|h'	        =>	\$help,
) or pod2usage({-exitval => 2});
$help and pod2usage ({-verbose=>1});

&SeqMule::Utils::checkOrCreateTmpdir($tmpdir);
my @steps=&SeqMule::Utils::parsePipeline($advanced);
my %options=%{ $steps[$n-1][2] };

my ($bam_prefix)= $bam=~/(.*?)\.bam$/ or die "ERROR: expect *.bam for BAM files: $bam\n";
my $cmd;

$cmd.="$bowtie2 -x $ref";

if (@fq>1)
{
    $cmd.=" -1 $fq[0] -2 $fq[1]";
} else 
{    
    $cmd.=" -U $fq[0]";
}

$cmd.=" -p $threads" if $threads>=2;
$cmd.=" --rg-id $rg --rg SM:$sample --rg PL:$pl --rg LB:$lb";

if ($options{EndToEnd} eq '1' )
{
    if ($options{AlignOption}=~/ff$/i)
    {   $cmd.=" --very-fast"}
    elsif ($options{AlignOption}=~/f$/i)
    {           $cmd.=" --fast"}
    elsif ($options{AlignOption}=~/s$/i)
    {           $cmd.=" --sensitive"}
    elsif ($options{AlignOption}=~/ss$/i)
    {$cmd.=" --very-sensitive"}
    else
    {warn "CAUTION: Unrecognized AlignOption for bowtie2, use default\n"}
}
elsif ($options{EndToEnd} eq '0')
{
    if ($options{AlignOption}=~/ff$/i)
    {   $cmd.=" --very-fast-local"}
    elsif ($options{AlignOption}=~/f$/i)
    {           $cmd.=" --fast-local"}
    elsif ($options{AlignOption}=~/s$/i)
    {$cmd.=" --sensitive-local"}
    elsif ($options{AlignOption}=~/ss$/i)
    {$cmd.=" --very-sensitive-local"}
    else
    {warn "CAUTION: Unrecognized AlignOption for bowtie2, use default\n"}
}
else
{ warn "CAUTION: Unrecognized EndToEnd option for bowtie2, keep default\n"}

$cmd.=" $options{additional} " if $options{additional} ne '';
$cmd.=" -S /dev/stdout | ";
$cmd .= " $samtools view -b -S ";
$cmd.=" -F 256 "; #only output primary alignment
$cmd .=($threads >= 2? " -@ $threads" : "");
$cmd .= " - | $samtools sort ".($threads>=2? " -@ $threads":"")." - $bam_prefix";

my $script=&SeqMule::Parallel::genTempScript($cmd);
exec $script;


__END__
